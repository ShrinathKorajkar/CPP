# Theory
    1. Cmake :- openSource, cross-platform, config mgmt tool -> build, test, package (build sytem generator)
    2. CMakeLists.txt :- define how project is built, source file, dependencies, compiler options, target definitions
    3. Process :- configuration(using CMakeLists.txt generate platform specific build files) and generation(files are used to build)
    4. Generator systems :- Make, Ninja, Visual Studio (carryout build instructions)
    5. Working :- parse cmakelists.txt -> cmakechache.txt(configuration) -> platform & generator detection -> variable expansion
                  -> check for dependencies -> generate build files -> build out of source
    6. MakeFile :- platform-dependent, used only with make, manual change of source file and dependencies changed. cmake is used to generate makefiles
    7. include_directories affect global targets, target_include_directories affect particular target
    8. Best Practices ->
        a. use target_*
        b. avoid global properties
        c. use generator expressions


# CLI Commands
    1. cmake <pathToSource> :- run configuration Process
        a. -B <pathToBuild> -S <pathToSource>
        b. -G <generator> => Ninja
    2. cmake --build <dir> :- build project using generated build files
    3. cmake --install <dir> :- install built project on system


# CMakeLists Commands
    - cmake_minimum_required(VERSION <version>)  :-  min version of CMake req 
    - project(<projectName>)  :-  specify project name
    - set(<variableName> <value>)
    - option(<optionName> <description> <defaultVal>)  :-  option that can be set by user
    - add_definitions(-D<macro>)  :-  add preprocessor definitions
    - include_directories(<dir> ...)  :-  add include dirs
    - add_executable(<executable_name> <source_files> ...)  :-  create an executable
    - add_library(<library_name> <source_files> ...)  :-  create a library.
    - target_include_directories(target_name scope <dir> ...)  :-  include dirs for a specific target
    - target_sources()  :-  add source files to target
    - target_link_libraries(target_name <library_name>)  :-  link libraries to target
    - target_compile_options(target_name PRIVATE <flag1> <flag2> ...)  :-  set compiler options for target
    - if(<condition>) ... elseif(<condition>) ...else() ... endif()
    - foreach(<var> <item1> <item2> ...) ... endforeach()
    - function(<function_name> <arg1> <arg2> ...) ... endfunction()
    - install(TARGETS <target_name> DESTINATION <destination>)  :-  install a target to specific location
    - install(FILES <target_name> DESTINATION <destination>)  :-  install a target to specific location
    - enable_testing()
    - add_test(NAME <test_name> COMMAND <command>)
    - ExternalProject_Add(<name> ...)  :-  add external project
    - add_custom_command(TARGET <target_name> POST_BUILD COMMAND <command>)  :-  add custom cmd after building target
    - add_subdirectory(<dir>)  :-  include CMakeLists.txt file from a subdirectory
    - configure_file(<input_file> <output_file>)  :-  generate file based on template
    - export(TARGETS <target1> <target2> FILE <filename>.cmake)  :-  export targets
    - include(<filename>.cmake)  :-  import targets
    
    - PRIVATE AND PUBLIC
    - cache entries


# Commands
    1. set()  
        a. set variables, cache entities, properties
        b. set(<variable> <value>... [CACHE <type> <docstring> [FORCE]])
        c. set(myCachedVar "Initial Value" CACHE STRING "Description of myCachedVar")
        d. set(myBoolVar ON CACHE BOOL "Description of myBoolVar")
        e. math(EXPR result "3 + 4")
        f. set(myGenerator $<$<CONFIG:Debug>:Debug>$<$<CONFIG:Release>:Release>)
        g. set(ENV{MY_ENV_VAR} "Hello")
    
    2. project()
        a. project(<project_name> [VERSION <major>[.<minor>[.<patch>[.<tweak>]]]]
           [DESCRIPTION <project_description>]
           [HOMEPAGE_URL <url>]
           [LANGUAGES <language-name>...]) // used in project

    3. option()
        a. define boolean options, user can enable/disable while configuration of project.
        b. option(<option_variable> "help string" [initial_value])
        c. default initial_value = OFF
        d. cmake -D<OPTION_VARIABLE>:BOOL=ON ..

    4. add_X()
        a. add_executable(targetName [WIN32] [MACOSX_BUNDLE] [EXCLUDE_FROM_ALL]
           source1 [source2 ...])
        b. add_library(targetName [STATIC | SHARED | MODULE]     // default static
            [EXCLUDE_FROM_ALL]
            source1 [source2 ...])

    5. target_include_directories()
        a. target_include_directories(targetName
            [SYSTEM] [BEFORE]
            [INTERFACE | PUBLIC | PRIVATE]
            [items1...])
        b. before specify include directories to be placed at the beginning
        c. interface -> propogate to consumers but not affect library itself
           PUBLIC    -> applied to both library and consumers
           PRIVATE   -> applied to only target library

    6. target_X()
        a. target_sources(target_name
            [INTERFACE | PUBLIC | PRIVATE]
            [source1.cpp... | source1.hpp...])
        b. target can be executable or library
        c. target_link_libraries(target_name
            [INTERFACE | PUBLIC | PRIVATE]
            [libraries...])
        d. target_compile_options(target_name
            [INTERFACE | PUBLIC | PRIVATE]
            [options...])
        e. options are applied during build process

    7. install(
        TARGETS|FILES <target1> <target2> ...
        EXPORT <export_name>
        [ARCHIVE DESTINATION <archive_destination>]
        [LIBRARY DESTINATION <library_destination>]
        [RUNTIME DESTINATION <runtime_destination>]
        [INCLUDES DESTINATION <include_destination>]
        [FILES <file1> <file2> ...]
        [DIRECTORY <dir1> DESTINATION <destination>]
        [CONFIGURATIONS [Debug|Release|...]])


# Conditional Statements
    1. if, elseif, else, endif
        if(<condition>) ... elseif(<condition>) ...else() ... endif()
    
    2. while, endwhile
        - while(<condition>) ... endwhile()

    3. foreach
        - foreach(<variable> IN <items>) ... endforeach()

    4. if, MATCHES
        - if(<variable> MATCHES regex) ... endif()
        - IF(version MATCHES "^[0-9]+\\.[0-9]+\\.[0-9]+$")

    5. if, keys
        - if(keys  variable)
        - keys      => DEFINED/COMMAND/EXISTS/IS_DIRECTORY/TARGET/IS_SYMLINK/CMP<VERSION>
        - variables => <variable>/<command>/<path>/<path>/target
        - AND, OR, NOT can be used in conditions
    
    6. macro(<macro_name> arg1 arg2 ...)
        # CMake commands
       endmacro()


# Variables
    1. caseSensitive, conventionally variables are written in UPPERCASE
    2. global scope, directory scope, cache scope
    3. accessed using ${}, by default it is uninitialised
    4. list([APPEND|PREPEND] Mylist "new Element)
    5. math(EXPR Result "5+3")
    6. cache variable (string, bool, path)
    7. cache var can be set using -D in cmake commandline


# Properties
    - set_target_properties(my_target PROPERTIES TARGET_SOURCES  "source1.cpp;source2.cpp")
    - set_target_properties(my_target PROPERTIES INCLUDE_DIRECTORIES  "/path/to/include")
    - set_target_properties(my_target PROPERTIES COMPILE_DEFINITIONS  "DEBUG")
    - set_target_properties(my_target PROPERTIES COMPILE_OPTIONS  "-Wall")
    - set_target_properties(my_target PROPERTIES LINK_LIBRARIES  "my_library")
    - set_target_properties(my_target PROPERTIES LINK_OPTIONS  "-L/path/to/libs")
    - set_target_properties(my_target PROPERTIES [RUNTIME|LIBRARY|ARCHIVE]_OUTPUT_DIRECTORY "/path/to/bin")
    - set_target_properties(my_target PROPERTIES OUTPUT_NAME  "my_executable")
    - set_target_properties(my_target PROPERTIES CXX_STANDARD  14)
    - set_target_properties(my_target PROPERTIES CXX_EXTENSIONS  OFF)
    - set_target_properties(my_target PROPERTIES CXX_STANDARD_REQUIRED  ON)
    - set_target_properties(my_target PROPERTIES POSITION_INDEPENDENT_CODE  ON)


# Modules
    1. custom module  :-  file.cmake
    2. include(moduleName)
    3. Find<library>.cmake => naming convention
    4. find_package(OpenSSL REQUIRED)


# Generator
    1. generator expressions used to provide information that is only available at generation time
    2. evaluated at generation of build files
    3. Conditionally including files
        set(source_files main.cpp $<$<CONFIG:Debug>:debug_helper.cpp>)
        add_executable(MyTarget ${source_files})
        // include the file only if build configuration is set to debug
    4. target_compile_definitions(MyTarget PRIVATE $<$<CONFIG:Debug>:DEBUG_MODE>)
       target_compile_options(MyTarget PRIVATE $<$<CONFIG:Debug>:-O0>)
       target_link_libraries(MyTarget PRIVATE $<$<CONFIG:Debug>:debug_lib>)
       add_custom_command(
        OUTPUT output.txt
        COMMAND echo $<$<CONFIG:Debug>:Debug Configuration> > output.txt
        COMMAND echo $<$<CONFIG:Release>:Release Configuration> > output.txt
        DEPENDS source.txt)


# Testing
    1. enable_testing()
    2. include(CTest)
    3. add_executable(MyTest test_main.cpp)
       add_test(NAME MyTest COMMAND MyTest arg1 arg2)
    4. set_tests_properties(MyTest PROPERTIES LABELS "unit" ENVIRONMENT "VAR=value")
    5. set_tests_properties(test1 test2 PROPERTIES FIXTURE_SETUP my_fixture_setup_command)
    6. ctest -> on command line will run all test cases defined


# Packaging
    1. CPack allow to package software for distribution
    2. include(CPack)
    3. set(CPACK_PACKAGE_NAME "MyProject")
       set(CPACK_PACKAGE_VERSION "1.0.0")
       set(CPACK_PACKAGE_VENDOR "MyCompany")
       set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "My project description.")
    4. generators -> ZIP, RPM, DEB, NSIS
    5. set(CPACK_GENERATOR "ZIP;RPM;DEB")
    6. set(CPACK_COMPONENTS_ALL applications libraries) => create components, assign file using install()
    7. set(CPACK_DEBIAN_PACKAGE_DEPENDS "libboost-dev (>= 1.65)")
    8. to pack ->   cmake --build .
                    cpack
    9. install(TARGETS MyApp
        DESTINATION bin
        COMPONENT applications)

       install(FILES mylibrary.so
        DESTINATION lib
        COMPONENT libraries)


# Cross Compiling
    1. CMAKE_TOOLCHAIN_FILE
    2. option is used to specify toochain file, which tells how to cross compile
    3. set(CMAKE_TOOLCHAIN_FILE path/to/my/toolchain-file.cmake)
    4. toochain file ->
        set(CMAKE_SYSTEM_NAME Linux)
        set(CMAKE_SYSTEM_PROCESSOR arm)
        set(CMAKE_C_COMPILER arm-linux-gcc)
        set(CMAKE_CXX_COMPILER arm-linux-g++)
    5. set(CMAKE_C_FLAGS "-march=armv7-a -mthumb")
    6. cmake -DCMAKE_TOOLCHAIN_FILE=path/to/my/toolchain-file.cmake ..


# Debugging
    1. cmake -DCMAKE_VERBOSE_MAKEFILE=ON ..  =>  detailed output
    2. cmake --trace [additional_options] path/to/source
    3. cmake --debug-output [additional_options] path/to/source
    4. cmake --trace-expand --trace-redirect=cmake_trace.txt .
    5. message([<mode>] "message string" ...)
        a. mode =>  STATUS, WARNING, AUTHER_WARNING, SEND_ERROR, FATAL_ERROR, DEPRECATION


